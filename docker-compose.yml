version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: curation_db
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: curation_engine
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - curation_network

  # Ollama Service for Local Llama Models
  ollama:
    image: ollama/ollama:latest
    container_name: ollama_server
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    networks:
      - curation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: curation_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - curation_network

  # Main Backend API
  curation_api:
    build:
      context: .
      dockerfile: curation-engine-ui/Dockerfile
    container_name: curation_api
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/curation_engine
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-here
    volumes:
      - ./curation-engine-ui:/app
      - /app/node_modules
    networks:
      - curation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BAML Classification Service
  baml_service:
    build:
      context: .
      dockerfile: baml-service/Dockerfile
    container_name: baml_classifier
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - ollama
      - redis
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - REDIS_URL=redis://redis:6379
      - BAML_LOG_LEVEL=INFO
      - BAML_CACHE_ENABLED=true
      - BAML_TIMEOUT_MS=60000
    volumes:
      - ./baml_src:/app/baml_src
      - ./BAML_Integration_Implementation.py:/app/BAML_Integration_Implementation.py
      - ./baml_client:/app/baml_client
    networks:
      - curation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Web Interface
  test_interface:
    build:
      context: .
      dockerfile: test-app/Dockerfile
    container_name: test_web_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - curation_api
      - baml_service
      - ollama
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - OLLAMA_BASE_URL=http://ollama:11434
      - CURATION_API_URL=http://curation_api:3001
      - BAML_SERVICE_URL=http://baml_service:8000
    volumes:
      - ./test-app:/app
    networks:
      - curation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Downloader Service (Init Container)
  model_downloader:
    image: curlimages/curl:latest
    container_name: model_downloader
    depends_on:
      - ollama
    command: |
      sh -c "
        echo 'Waiting for Ollama to be ready...'
        while ! curl -f http://ollama:11434/api/tags; do
          sleep 5
        done
        echo 'Downloading Llama models...'
        curl -X POST http://ollama:11434/api/pull -d '{\"name\": \"llama3.2:latest\"}'
        curl -X POST http://ollama:11434/api/pull -d '{\"name\": \"llama3.1:latest\"}'
        curl -X POST http://ollama:11434/api/pull -d '{\"name\": \"codellama:latest\"}'
        echo 'Models downloaded successfully!'
      "
    networks:
      - curation_network
    restart: "no"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: curation_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - test_interface
      - curation_api
      - baml_service
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - curation_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: curation_monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - curation_network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: curation_dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - curation_network

volumes:
  mongodb_data:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  curation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
