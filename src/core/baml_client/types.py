# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (6)
# #########################################################################

class AgeCategory(str, Enum):
    UNDER_13 = "UNDER_13"
    UNDER_16 = "UNDER_16"
    UNDER_18 = "UNDER_18"
    ADULT = "ADULT"

class Jurisdiction(str, Enum):
    EU = "EU"
    US = "US"
    INDIA = "INDIA"
    CHINA = "CHINA"

class ParentalControls(str, Enum):
    NONE = "NONE"
    MILD = "MILD"
    MODERATE = "MODERATE"
    STRICT = "STRICT"

class ScamType(str, Enum):
    INVESTMENT_FRAUD = "INVESTMENT_FRAUD"
    ROMANCE_SCAM = "ROMANCE_SCAM"
    TECH_SUPPORT_SCAM = "TECH_SUPPORT_SCAM"
    MEDICARE_SCAM = "MEDICARE_SCAM"
    LOTTERY_SCAM = "LOTTERY_SCAM"
    CHARITY_FRAUD = "CHARITY_FRAUD"
    GRANDPARENT_SCAM = "GRANDPARENT_SCAM"
    IDENTITY_THEFT = "IDENTITY_THEFT"
    PHISHING = "PHISHING"
    CRYPTOCURRENCY_SCAM = "CRYPTOCURRENCY_SCAM"

class SensitivityLevel(str, Enum):
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"

class VulnerabilityType(str, Enum):
    ELDERLY = "ELDERLY"
    INVESTMENT_SCAM_TARGET = "INVESTMENT_SCAM_TARGET"
    FREQUENT_NEWS_CONSUMER = "FREQUENT_NEWS_CONSUMER"
    ISOLATION_RISK = "ISOLATION_RISK"
    COGNITIVE_IMPAIRMENT = "COGNITIVE_IMPAIRMENT"
    RECENT_LOSS = "RECENT_LOSS"
    FINANCIAL_STRESS = "FINANCIAL_STRESS"

# #########################################################################
# Generated classes (6)
# #########################################################################

class ComprehensiveClassification(BaseModel):
    safety: "SafetyClassification"
    educational: "EducationalValue"
    viewpoint: "ViewpointAnalysis"
    scam_detection: "ScamDetection"
    overall_confidence: float
    recommendation: str
    summary_reasoning: str

class EducationalValue(BaseModel):
    educational_score: float
    learning_objectives: typing.List[str]
    subject_areas: typing.List[str]
    cognitive_level: str
    reading_level: int
    factual_accuracy: float
    reasoning: str

class SafetyClassification(BaseModel):
    safety_score: float
    violence_level: float
    adult_content: bool
    hate_speech: float
    misinformation_risk: float
    age_appropriateness: str
    reasoning: str
    content_warnings: typing.List[str]

class ScamDetection(BaseModel):
    is_scam: bool
    scam_types: typing.List[ScamType]
    scam_confidence: float
    urgency_tactics: bool
    too_good_to_be_true: bool
    requests_personal_info: bool
    unverified_claims: bool
    emotional_manipulation: bool
    warning_flags: typing.List[str]
    protection_recommendation: str

class UserContext(BaseModel):
    age_category: AgeCategory
    jurisdiction: Jurisdiction
    parental_controls: ParentalControls
    sensitivity_level: SensitivityLevel
    vulnerability_factors: typing.List[VulnerabilityType]
    protection_level: str

class ViewpointAnalysis(BaseModel):
    political_leaning: str
    bias_score: float
    perspective_diversity: float
    controversy_level: float
    source_credibility: float
    reasoning: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
