/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export { FieldType, EnumBuilder, ClassBuilder }

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ComprehensiveClassification: ClassViewer<'ComprehensiveClassification', "safety" | "educational" | "viewpoint" | "overall_confidence" | "recommendation" | "summary_reasoning">;
    
    EducationalValue: ClassViewer<'EducationalValue', "educational_score" | "learning_objectives" | "subject_areas" | "cognitive_level" | "reading_level" | "factual_accuracy" | "reasoning">;
    
    SafetyClassification: ClassViewer<'SafetyClassification', "safety_score" | "violence_level" | "adult_content" | "hate_speech" | "misinformation_risk" | "age_appropriateness" | "reasoning" | "content_warnings">;
    
    UserContext: ClassViewer<'UserContext', "age_category" | "jurisdiction" | "parental_controls" | "sensitivity_level">;
    
    ViewpointAnalysis: ClassViewer<'ViewpointAnalysis', "political_leaning" | "bias_score" | "perspective_diversity" | "controversy_level" | "source_credibility" | "reasoning">;
    
    
    AgeCategory: EnumViewer<'AgeCategory', "UNDER_13" | "UNDER_16" | "UNDER_18" | "ADULT">;
    
    Jurisdiction: EnumViewer<'Jurisdiction', "EU" | "US" | "INDIA" | "CHINA">;
    
    ParentalControls: EnumViewer<'ParentalControls', "NONE" | "MILD" | "MODERATE" | "STRICT">;
    
    SensitivityLevel: EnumViewer<'SensitivityLevel', "LOW" | "MEDIUM" | "HIGH">;
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ComprehensiveClassification","EducationalValue","SafetyClassification","UserContext","ViewpointAnalysis",
          ]),
          enums: new Set([
            "AgeCategory","Jurisdiction","ParentalControls","SensitivityLevel",
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ComprehensiveClassification = this.tb.classViewer("ComprehensiveClassification", [
          "safety","educational","viewpoint","overall_confidence","recommendation","summary_reasoning",
        ]);
        
        this.EducationalValue = this.tb.classViewer("EducationalValue", [
          "educational_score","learning_objectives","subject_areas","cognitive_level","reading_level","factual_accuracy","reasoning",
        ]);
        
        this.SafetyClassification = this.tb.classViewer("SafetyClassification", [
          "safety_score","violence_level","adult_content","hate_speech","misinformation_risk","age_appropriateness","reasoning","content_warnings",
        ]);
        
        this.UserContext = this.tb.classViewer("UserContext", [
          "age_category","jurisdiction","parental_controls","sensitivity_level",
        ]);
        
        this.ViewpointAnalysis = this.tb.classViewer("ViewpointAnalysis", [
          "political_leaning","bias_score","perspective_diversity","controversy_level","source_credibility","reasoning",
        ]);
        
        
        this.AgeCategory = this.tb.enumViewer("AgeCategory", [
          "UNDER_13","UNDER_16","UNDER_18","ADULT",
        ]);
        
        this.Jurisdiction = this.tb.enumViewer("Jurisdiction", [
          "EU","US","INDIA","CHINA",
        ]);
        
        this.ParentalControls = this.tb.enumViewer("ParentalControls", [
          "NONE","MILD","MODERATE","STRICT",
        ]);
        
        this.SensitivityLevel = this.tb.enumViewer("SensitivityLevel", [
          "LOW","MEDIUM","HIGH",
        ]);
        
    }

    reset(): void {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}